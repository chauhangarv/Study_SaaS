{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chauh/OneDrive/Desktop/Coding/saas/lib/vapi.sdk.ts"],"sourcesContent":["import Vapi from \"@vapi-ai/web\";\r\n\r\nexport const vapi = new Vapi(process.env.NEXT_PUBLIC_VAPI_WEB_TOKEN!);"],"names":[],"mappings":";;;AAE6B;AAF7B;;AAEO,MAAM,OAAO,IAAI,sJAAA,CAAA,UAAI","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chauh/OneDrive/Desktop/Coding/saas/lib/actions/companion.actions.ts"],"sourcesContent":["'use server';\r\n\r\nimport {auth} from \"@clerk/nextjs/server\";\r\nimport {createSupabaseClient} from \"@/lib/supabase\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\nexport const createCompanion = async (formData: CreateCompanion) => {\r\n    const { userId: author } = await auth();\r\n    const supabase = createSupabaseClient();\r\n\r\n    const { data, error } = await supabase\r\n        .from('companions')\r\n        .insert({...formData, author })\r\n        .select();\r\n\r\n    if(error || !data) throw new Error(error?.message || 'Failed to create a companion');\r\n\r\n    return data[0];\r\n}\r\n\r\nexport const getAllCompanions = async ({ limit = 10, page = 1, subject, topic }: GetAllCompanions) => {\r\n    const supabase = createSupabaseClient();\r\n\r\n    let query = supabase.from('companions').select();\r\n\r\n    if(subject && topic) {\r\n        query = query.ilike('subject', `%${subject}%`)\r\n            .or(`topic.ilike.%${topic}%,name.ilike.%${topic}%`)\r\n    } else if(subject) {\r\n        query = query.ilike('subject', `%${subject}%`)\r\n    } else if(topic) {\r\n        query = query.or(`topic.ilike.%${topic}%,name.ilike.%${topic}%`)\r\n    }\r\n\r\n    query = query.range((page - 1) * limit, page * limit - 1);\r\n\r\n    const { data: companions, error } = await query;\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return companions;\r\n}\r\n\r\nexport const getCompanion = async (id: string) => {\r\n    const supabase = createSupabaseClient();\r\n\r\n    const { data, error } = await supabase\r\n        .from('companions')\r\n        .select()\r\n        .eq('id', id);\r\n\r\n    if(error) return console.log(error);\r\n\r\n    return data[0];\r\n}\r\n\r\nexport const addToSessionHistory = async (companionId: string) => {\r\n    const { userId } = await auth();\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase.from('session_history')\r\n        .insert({\r\n            companion_id: companionId,\r\n            user_id: userId,\r\n        })\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data;\r\n}\r\n\r\nexport const getRecentSessions = async (limit = 10) => {\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase\r\n        .from('session_history')\r\n        .select(`companions:companion_id (*)`)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit)\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data.map(({ companions }) => companions);\r\n}\r\n\r\nexport const getUserSessions = async (userId: string, limit = 10) => {\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase\r\n        .from('session_history')\r\n        .select(`companions:companion_id (*)`)\r\n        .eq('user_id', userId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit)\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data.map(({ companions }) => companions);\r\n}\r\n\r\nexport const getUserCompanions = async (userId: string) => {\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase\r\n        .from('companions')\r\n        .select()\r\n        .eq('author', userId)\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data;\r\n}\r\n\r\n// export const newCompanionPermissions = async () => {\r\n//     const { userId, has } = await auth();\r\n//     const supabase = createSupabaseClient();\r\n\r\n//     let limit = 0;\r\n\r\n//     if(has({ plan: 'pro' })) {\r\n//         return true;\r\n//     } else if(has({ feature: \"3_companion_limit\" })) {\r\n//         limit = 3;\r\n//     } else if(has({ feature: \"10_companion_limit\" })) {\r\n//         limit = 10;\r\n//     }\r\n\r\n//     const { data, error } = await supabase\r\n//         .from('companions')\r\n//         .select('id', { count: 'exact' })\r\n//         .eq('author', userId)\r\n\r\n//     if(error) throw new Error(error.message);\r\n\r\n//     const companionCount = data?.length;\r\n\r\n//     if(companionCount >= limit) {\r\n//         return false\r\n//     } else {\r\n//         return true;\r\n//     }\r\n// }\r\n\r\n// Bookmarks\r\nexport const addBookmark = async (companionId: string, path: string) => {\r\n  const { userId } = await auth();\r\n  if (!userId) return;\r\n  const supabase = createSupabaseClient();\r\n  const { data, error } = await supabase.from(\"bookmarks\").insert({\r\n    companion_id: companionId,\r\n    user_id: userId,\r\n  });\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n  // Revalidate the path to force a re-render of the page\r\n\r\n  revalidatePath(path);\r\n  return data;\r\n};\r\n\r\nexport const removeBookmark = async (companionId: string, path: string) => {\r\n  const { userId } = await auth();\r\n  if (!userId) return;\r\n  const supabase = createSupabaseClient();\r\n  const { data, error } = await supabase\r\n    .from(\"bookmarks\")\r\n    .delete()\r\n    .eq(\"companion_id\", companionId)\r\n    .eq(\"user_id\", userId);\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n  revalidatePath(path);\r\n  return data;\r\n};\r\n\r\n// It's almost the same as getUserCompanions, but it's for the bookmarked companions\r\nexport const getBookmarkedCompanions = async (userId: string) => {\r\n  const supabase = createSupabaseClient();\r\n  const { data, error } = await supabase\r\n    .from(\"bookmarks\")\r\n    .select(`companions:companion_id (*)`) // Notice the (*) to get all the companion data\r\n    .eq(\"user_id\", userId);\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n  // We don't need the bookmarks data, so we return only the companions\r\n  return data.map(({ companions }) => companions);\r\n};"],"names":[],"mappings":";;;;;;IAwDa,sBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chauh/OneDrive/Desktop/Coding/saas/components/CompanionComponent.tsx"],"sourcesContent":["'use client';\r\n\r\nimport {useEffect, useRef, useState} from 'react'\r\nimport {cn, configureAssistant, getSubjectColor} from \"@/lib/utils\";\r\nimport {vapi} from \"@/lib/vapi.sdk\";\r\nimport Image from \"next/image\";\r\nimport Lottie, {LottieRefCurrentProps} from \"lottie-react\";\r\nimport soundwaves from '@/constants/soundwaves.json'\r\nimport { addToSessionHistory } from '@/lib/actions/companion.actions';\r\n\r\nenum CallStatus {\r\n    INACTIVE = 'INACTIVE',\r\n    CONNECTING = 'CONNECTING',\r\n    ACTIVE = 'ACTIVE',\r\n    FINISHED = 'FINISHED',\r\n}\r\n\r\nconst CompanionComponent = ({ companionId, subject, topic, name, userName, userImage, style, voice }: CompanionComponentProps) => {\r\n    const [callStatus, setCallStatus] = useState<CallStatus>(CallStatus.INACTIVE);\r\n    const [isSpeaking, setIsSpeaking] = useState(false);\r\n    const [isMuted, setIsMuted] = useState(false);\r\n    const [messages, setMessages] = useState<SavedMessage[]>([]);\r\n\r\n\r\n    const lottieRef = useRef<LottieRefCurrentProps>(null);\r\n\r\n    useEffect(() => {\r\n        if(lottieRef) {\r\n            if(isSpeaking) {\r\n                lottieRef.current?.play()\r\n            } else {\r\n                lottieRef.current?.stop()\r\n            }\r\n        }\r\n    }, [isSpeaking, lottieRef])\r\n\r\n    useEffect(() => {\r\n        const onCallStart = () => setCallStatus(CallStatus.ACTIVE);\r\n\r\n        const onCallEnd =() => {\r\n            setCallStatus(CallStatus.FINISHED);\r\n            addToSessionHistory(companionId)\r\n        }\r\n\r\n        const onMessage = (message: Message) => {\r\n            if(message.type === 'transcript' && message.transcriptType === 'final') {\r\n                const newMessage= { role: message.role, content: message.transcript}\r\n                setMessages((prev) => [newMessage, ...prev])\r\n            }\r\n        }\r\n\r\n        const onSpeechStart = () => setIsSpeaking(true);\r\n        const onSpeechEnd = () => setIsSpeaking(false);\r\n\r\n        const onError = (error: Error) => console.log('Error', error);\r\n\r\n        vapi.on('call-start', onCallStart);\r\n        vapi.on('call-end', onCallEnd);\r\n        vapi.on('message', onMessage);\r\n        vapi.on('error', onError);\r\n        vapi.on('speech-start', onSpeechStart);\r\n        vapi.on('speech-end', onSpeechEnd);\r\n\r\n        return () => {\r\n            vapi.off('call-start', onCallStart);\r\n            vapi.off('call-end', onCallEnd);\r\n            vapi.off('message', onMessage);\r\n            vapi.off('error', onError);\r\n            vapi.off('speech-start', onSpeechStart);\r\n            vapi.off('speech-end', onSpeechEnd);\r\n        }\r\n    }, []);\r\n\r\n    const toggleMicrophone = () => {\r\n        const isMuted = vapi.isMuted();\r\n        vapi.setMuted(!isMuted);\r\n        setIsMuted(!isMuted)\r\n    }\r\n\r\n    const handleCall = async () => {\r\n        setCallStatus(CallStatus.CONNECTING)\r\n\r\n        const assistantOverrides = {\r\n            variableValues: { subject, topic, style },\r\n            clientMessages: [\"transcript\"],\r\n            serverMessages: [],\r\n        }\r\n\r\n        // @ts-expect-error\r\n        vapi.start(configureAssistant(voice, style), assistantOverrides)\r\n    }\r\n\r\n    const handleDisconnect = () => {\r\n        setCallStatus(CallStatus.FINISHED)\r\n        vapi.stop()\r\n    }\r\n\r\n    return (\r\n        <section className=\"flex flex-col h-[70vh]\">\r\n            <section className=\"flex gap-8 max-sm:flex-col\">\r\n                <div className=\"companion-section\">\r\n                    <div className=\"companion-avatar\" style={{ backgroundColor: getSubjectColor(subject)}}>\r\n                        <div\r\n                            className={\r\n                            cn(\r\n                                'absolute transition-opacity duration-1000', callStatus === CallStatus.FINISHED || callStatus === CallStatus.INACTIVE ? 'opacity-1001' : 'opacity-0', callStatus === CallStatus.CONNECTING && 'opacity-100 animate-pulse'\r\n                            )\r\n                        }>\r\n                            <Image src={`/icons/${subject}.svg`} alt={subject ? `${subject} icon` : \"Subject icon\"} width={150} height={150} className=\"max-sm:w-fit\" />\r\n                        </div>\r\n\r\n                        <div className={cn('absolute transition-opacity duration-1000', callStatus === CallStatus.ACTIVE ? 'opacity-100': 'opacity-0')}>\r\n                            <Lottie\r\n                                lottieRef={lottieRef}\r\n                                animationData={soundwaves}\r\n                                autoplay={false}\r\n                                className=\"companion-lottie\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <p className=\"font-bold text-2xl\">{name}</p>\r\n                </div>\r\n\r\n                <div className=\"user-section\">\r\n                    <div className=\"user-avatar\">\r\n                        <Image src={userImage} alt={userName ? `${userName}'s profile image` : \"User profile image\"} width={130} height={130} className=\"rounded-lg\" />\r\n                        <p className=\"font-bold text-2xl\">\r\n                            {userName}\r\n                        </p>\r\n                    </div>\r\n                    <button className=\"btn-mic\" onClick={toggleMicrophone} disabled={callStatus !== CallStatus.ACTIVE}>\r\n                        <Image src={isMuted ? '/icons/mic-off.svg' : '/icons/mic-on.svg'} alt=\"mic\" width={36} height={36} />\r\n                        <p className=\"max-sm:hidden\">\r\n                            {isMuted ? 'Turn on microphone' : 'Turn off microphone'}\r\n                        </p>\r\n                    </button>\r\n                    <button className={cn('rounded-lg py-2 cursor-pointer transition-colors w-full text-white', callStatus ===CallStatus.ACTIVE ? 'bg-red-700' : 'bg-primary', callStatus === CallStatus.CONNECTING && 'animate-pulse')} onClick={callStatus === CallStatus.ACTIVE ? handleDisconnect : handleCall}>\r\n                        {callStatus === CallStatus.ACTIVE\r\n                        ? \"End Session\"\r\n                        : callStatus === CallStatus.CONNECTING\r\n                            ? 'Connecting'\r\n                        : 'Start Session'\r\n                        }\r\n                    </button>\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"transcript\">\r\n                <div className=\"transcript-message no-scrollbar\">\r\n                    {messages.map((message, index) => {\r\n                        if(message.role === 'assistant') {\r\n                            return (\r\n                                <p key={index} className=\"max-sm:text-sm\">\r\n                                    {\r\n                                        name\r\n                                            .split(' ')[0]\r\n                                            .replace('/[.,]/g, ','')\r\n                                    }: {message.content}\r\n                                </p>\r\n                            )\r\n                        } else {\r\n                           return <p key={index} className=\"text-primary max-sm:text-sm\">\r\n                                {userName}: {message.content}\r\n                            </p>\r\n                        }\r\n                    })}\r\n                </div>\r\n\r\n                <div className=\"transcript-fade\" />\r\n            </section>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CompanionComponent"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AARA;;;;;;;;AAUA,IAAA,AAAK,oCAAA;;;;;WAAA;EAAA;AAOL,MAAM,qBAAqB,CAAC,EAAE,WAAW,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAA2B;;IACzH,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD;IAC3C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB,EAAE;IAG3D,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAyB;IAEhD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;wCAAE;YACN,IAAG,WAAW;gBACV,IAAG,YAAY;oBACX,UAAU,OAAO,EAAE;gBACvB,OAAO;oBACH,UAAU,OAAO,EAAE;gBACvB;YACJ;QACJ;uCAAG;QAAC;QAAY;KAAU;IAE1B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;wCAAE;YACN,MAAM;4DAAc,IAAM;;YAE1B,MAAM;0DAAW;oBACb;oBACA,CAAA,GAAA,yJAAA,CAAA,sBAAmB,AAAD,EAAE;gBACxB;;YAEA,MAAM;0DAAY,CAAC;oBACf,IAAG,QAAQ,IAAI,KAAK,gBAAgB,QAAQ,cAAc,KAAK,SAAS;wBACpE,MAAM,aAAY;4BAAE,MAAM,QAAQ,IAAI;4BAAE,SAAS,QAAQ,UAAU;wBAAA;wBACnE;sEAAY,CAAC,OAAS;oCAAC;uCAAe;iCAAK;;oBAC/C;gBACJ;;YAEA,MAAM;8DAAgB,IAAM,cAAc;;YAC1C,MAAM;4DAAc,IAAM,cAAc;;YAExC,MAAM;wDAAU,CAAC,QAAiB,QAAQ,GAAG,CAAC,SAAS;;YAEvD,qHAAA,CAAA,OAAI,CAAC,EAAE,CAAC,cAAc;YACtB,qHAAA,CAAA,OAAI,CAAC,EAAE,CAAC,YAAY;YACpB,qHAAA,CAAA,OAAI,CAAC,EAAE,CAAC,WAAW;YACnB,qHAAA,CAAA,OAAI,CAAC,EAAE,CAAC,SAAS;YACjB,qHAAA,CAAA,OAAI,CAAC,EAAE,CAAC,gBAAgB;YACxB,qHAAA,CAAA,OAAI,CAAC,EAAE,CAAC,cAAc;YAEtB;gDAAO;oBACH,qHAAA,CAAA,OAAI,CAAC,GAAG,CAAC,cAAc;oBACvB,qHAAA,CAAA,OAAI,CAAC,GAAG,CAAC,YAAY;oBACrB,qHAAA,CAAA,OAAI,CAAC,GAAG,CAAC,WAAW;oBACpB,qHAAA,CAAA,OAAI,CAAC,GAAG,CAAC,SAAS;oBAClB,qHAAA,CAAA,OAAI,CAAC,GAAG,CAAC,gBAAgB;oBACzB,qHAAA,CAAA,OAAI,CAAC,GAAG,CAAC,cAAc;gBAC3B;;QACJ;uCAAG,EAAE;IAEL,MAAM,mBAAmB;QACrB,MAAM,UAAU,qHAAA,CAAA,OAAI,CAAC,OAAO;QAC5B,qHAAA,CAAA,OAAI,CAAC,QAAQ,CAAC,CAAC;QACf,WAAW,CAAC;IAChB;IAEA,MAAM,aAAa;QACf;QAEA,MAAM,qBAAqB;YACvB,gBAAgB;gBAAE;gBAAS;gBAAO;YAAM;YACxC,gBAAgB;gBAAC;aAAa;YAC9B,gBAAgB,EAAE;QACtB;QAEA,mBAAmB;QACnB,qHAAA,CAAA,OAAI,CAAC,KAAK,CAAC,CAAA,GAAA,+GAAA,CAAA,qBAAkB,AAAD,EAAE,OAAO,QAAQ;IACjD;IAEA,MAAM,mBAAmB;QACrB;QACA,qHAAA,CAAA,OAAI,CAAC,IAAI;IACb;IAEA,qBACI,6LAAC;QAAQ,WAAU;;0BACf,6LAAC;gBAAQ,WAAU;;kCACf,6LAAC;wBAAI,WAAU;;0CACX,6LAAC;gCAAI,WAAU;gCAAmB,OAAO;oCAAE,iBAAiB,CAAA,GAAA,+GAAA,CAAA,kBAAe,AAAD,EAAE;gCAAQ;;kDAChF,6LAAC;wCACG,WACA,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACG,6CAA6C,6BAAsC,4BAAqC,iBAAiB,aAAa,+BAAwC;kDAGlM,cAAA,6LAAC,gIAAA,CAAA,UAAK;4CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,IAAI,CAAC;4CAAE,KAAK,UAAU,GAAG,QAAQ,KAAK,CAAC,GAAG;4CAAgB,OAAO;4CAAK,QAAQ;4CAAK,WAAU;;;;;;;;;;;kDAG/H,6LAAC;wCAAI,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C,0BAAmC,gBAAe;kDAC9G,cAAA,6LAAC,2JAAA,CAAA,UAAM;4CACH,WAAW;4CACX,eAAe,+FAAA,CAAA,UAAU;4CACzB,UAAU;4CACV,WAAU;;;;;;;;;;;;;;;;;0CAItB,6LAAC;gCAAE,WAAU;0CAAsB;;;;;;;;;;;;kCAGvC,6LAAC;wBAAI,WAAU;;0CACX,6LAAC;gCAAI,WAAU;;kDACX,6LAAC,gIAAA,CAAA,UAAK;wCAAC,KAAK;wCAAW,KAAK,WAAW,GAAG,SAAS,gBAAgB,CAAC,GAAG;wCAAsB,OAAO;wCAAK,QAAQ;wCAAK,WAAU;;;;;;kDAChI,6LAAC;wCAAE,WAAU;kDACR;;;;;;;;;;;;0CAGT,6LAAC;gCAAO,WAAU;gCAAU,SAAS;gCAAkB,UAAU;;kDAC7D,6LAAC,gIAAA,CAAA,UAAK;wCAAC,KAAK,UAAU,uBAAuB;wCAAqB,KAAI;wCAAM,OAAO;wCAAI,QAAQ;;;;;;kDAC/F,6LAAC;wCAAE,WAAU;kDACR,UAAU,uBAAuB;;;;;;;;;;;;0CAG1C,6LAAC;gCAAO,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,sEAAsE,0BAAkC,eAAe,cAAc,+BAAwC;gCAAkB,SAAS,0BAAmC,mBAAmB;0CAC/Q,0BACC,gBACA,8BACI,eACJ;;;;;;;;;;;;;;;;;;0BAMd,6LAAC;gBAAQ,WAAU;;kCACf,6LAAC;wBAAI,WAAU;kCACV,SAAS,GAAG,CAAC,CAAC,SAAS;4BACpB,IAAG,QAAQ,IAAI,KAAK,aAAa;gCAC7B,qBACI,6LAAC;oCAAc,WAAU;;wCAEjB,KACK,KAAK,CAAC,IAAI,CAAC,EAAE,CACb,OAAO,CAAC,aAAY;wCAC5B;wCAAG,QAAQ,OAAO;;mCALf;;;;;4BAQhB,OAAO;gCACJ,qBAAO,6LAAC;oCAAc,WAAU;;wCAC1B;wCAAS;wCAAG,QAAQ,OAAO;;mCADlB;;;;;4BAGlB;wBACJ;;;;;;kCAGJ,6LAAC;wBAAI,WAAU;;;;;;;;;;;;;;;;;;AAI/B;GA3JM;KAAA;uCA6JS","debugId":null}}]
}