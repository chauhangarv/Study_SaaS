{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chauh/OneDrive/Desktop/Coding/saas/lib/actions/companion.actions.ts"],"sourcesContent":["'use server';\r\n\r\nimport {auth} from \"@clerk/nextjs/server\";\r\nimport {createSupabaseClient} from \"@/lib/supabase\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\nexport const createCompanion = async (formData: CreateCompanion) => {\r\n    const { userId: author } = await auth();\r\n    const supabase = createSupabaseClient();\r\n\r\n    const { data, error } = await supabase\r\n        .from('companions')\r\n        .insert({...formData, author })\r\n        .select();\r\n\r\n    if(error || !data) throw new Error(error?.message || 'Failed to create a companion');\r\n\r\n    return data[0];\r\n}\r\n\r\nexport const getAllCompanions = async ({ limit = 10, page = 1, subject, topic }: GetAllCompanions) => {\r\n    const supabase = createSupabaseClient();\r\n\r\n    let query = supabase.from('companions').select();\r\n\r\n    if(subject && topic) {\r\n        query = query.ilike('subject', `%${subject}%`)\r\n            .or(`topic.ilike.%${topic}%,name.ilike.%${topic}%`)\r\n    } else if(subject) {\r\n        query = query.ilike('subject', `%${subject}%`)\r\n    } else if(topic) {\r\n        query = query.or(`topic.ilike.%${topic}%,name.ilike.%${topic}%`)\r\n    }\r\n\r\n    query = query.range((page - 1) * limit, page * limit - 1);\r\n\r\n    const { data: companions, error } = await query;\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return companions;\r\n}\r\n\r\nexport const getCompanion = async (id: string) => {\r\n    const supabase = createSupabaseClient();\r\n\r\n    const { data, error } = await supabase\r\n        .from('companions')\r\n        .select()\r\n        .eq('id', id);\r\n\r\n    if(error) return console.log(error);\r\n\r\n    return data[0];\r\n}\r\n\r\nexport const addToSessionHistory = async (companionId: string) => {\r\n    const { userId } = await auth();\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase.from('session_history')\r\n        .insert({\r\n            companion_id: companionId,\r\n            user_id: userId,\r\n        })\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data;\r\n}\r\n\r\nexport const getRecentSessions = async (limit = 10) => {\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase\r\n        .from('session_history')\r\n        .select(`companions:companion_id (*)`)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit)\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data.map(({ companions }) => companions);\r\n}\r\n\r\nexport const getUserSessions = async (userId: string, limit = 10) => {\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase\r\n        .from('session_history')\r\n        .select(`companions:companion_id (*)`)\r\n        .eq('user_id', userId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit)\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data.map(({ companions }) => companions);\r\n}\r\n\r\nexport const getUserCompanions = async (userId: string) => {\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase\r\n        .from('companions')\r\n        .select()\r\n        .eq('author', userId)\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data;\r\n}\r\n\r\n// export const newCompanionPermissions = async () => {\r\n//     const { userId, has } = await auth();\r\n//     const supabase = createSupabaseClient();\r\n\r\n//     let limit = 0;\r\n\r\n//     if(has({ plan: 'pro' })) {\r\n//         return true;\r\n//     } else if(has({ feature: \"3_companion_limit\" })) {\r\n//         limit = 3;\r\n//     } else if(has({ feature: \"10_companion_limit\" })) {\r\n//         limit = 10;\r\n//     }\r\n\r\n//     const { data, error } = await supabase\r\n//         .from('companions')\r\n//         .select('id', { count: 'exact' })\r\n//         .eq('author', userId)\r\n\r\n//     if(error) throw new Error(error.message);\r\n\r\n//     const companionCount = data?.length;\r\n\r\n//     if(companionCount >= limit) {\r\n//         return false\r\n//     } else {\r\n//         return true;\r\n//     }\r\n// }\r\n\r\n// Bookmarks\r\nexport const addBookmark = async (companionId: string, path: string) => {\r\n  const { userId } = await auth();\r\n  if (!userId) return;\r\n  const supabase = createSupabaseClient();\r\n  const { data, error } = await supabase.from(\"bookmarks\").insert({\r\n    companion_id: companionId,\r\n    user_id: userId,\r\n  });\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n  // Revalidate the path to force a re-render of the page\r\n\r\n  revalidatePath(path);\r\n  return data;\r\n};\r\n\r\nexport const removeBookmark = async (companionId: string, path: string) => {\r\n  const { userId } = await auth();\r\n  if (!userId) return;\r\n  const supabase = createSupabaseClient();\r\n  const { data, error } = await supabase\r\n    .from(\"bookmarks\")\r\n    .delete()\r\n    .eq(\"companion_id\", companionId)\r\n    .eq(\"user_id\", userId);\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n  revalidatePath(path);\r\n  return data;\r\n};\r\n\r\n// It's almost the same as getUserCompanions, but it's for the bookmarked companions\r\nexport const getBookmarkedCompanions = async (userId: string) => {\r\n  const supabase = createSupabaseClient();\r\n  const { data, error } = await supabase\r\n    .from(\"bookmarks\")\r\n    .select(`companions:companion_id (*)`) // Notice the (*) to get all the companion data\r\n    .eq(\"user_id\", userId);\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n  // We don't need the bookmarks data, so we return only the companions\r\n  return data.map(({ companions }) => companions);\r\n};"],"names":[],"mappings":";;;;;;IA6Ja,iBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chauh/OneDrive/Desktop/Coding/saas/lib/actions/companion.actions.ts"],"sourcesContent":["'use server';\r\n\r\nimport {auth} from \"@clerk/nextjs/server\";\r\nimport {createSupabaseClient} from \"@/lib/supabase\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\nexport const createCompanion = async (formData: CreateCompanion) => {\r\n    const { userId: author } = await auth();\r\n    const supabase = createSupabaseClient();\r\n\r\n    const { data, error } = await supabase\r\n        .from('companions')\r\n        .insert({...formData, author })\r\n        .select();\r\n\r\n    if(error || !data) throw new Error(error?.message || 'Failed to create a companion');\r\n\r\n    return data[0];\r\n}\r\n\r\nexport const getAllCompanions = async ({ limit = 10, page = 1, subject, topic }: GetAllCompanions) => {\r\n    const supabase = createSupabaseClient();\r\n\r\n    let query = supabase.from('companions').select();\r\n\r\n    if(subject && topic) {\r\n        query = query.ilike('subject', `%${subject}%`)\r\n            .or(`topic.ilike.%${topic}%,name.ilike.%${topic}%`)\r\n    } else if(subject) {\r\n        query = query.ilike('subject', `%${subject}%`)\r\n    } else if(topic) {\r\n        query = query.or(`topic.ilike.%${topic}%,name.ilike.%${topic}%`)\r\n    }\r\n\r\n    query = query.range((page - 1) * limit, page * limit - 1);\r\n\r\n    const { data: companions, error } = await query;\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return companions;\r\n}\r\n\r\nexport const getCompanion = async (id: string) => {\r\n    const supabase = createSupabaseClient();\r\n\r\n    const { data, error } = await supabase\r\n        .from('companions')\r\n        .select()\r\n        .eq('id', id);\r\n\r\n    if(error) return console.log(error);\r\n\r\n    return data[0];\r\n}\r\n\r\nexport const addToSessionHistory = async (companionId: string) => {\r\n    const { userId } = await auth();\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase.from('session_history')\r\n        .insert({\r\n            companion_id: companionId,\r\n            user_id: userId,\r\n        })\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data;\r\n}\r\n\r\nexport const getRecentSessions = async (limit = 10) => {\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase\r\n        .from('session_history')\r\n        .select(`companions:companion_id (*)`)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit)\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data.map(({ companions }) => companions);\r\n}\r\n\r\nexport const getUserSessions = async (userId: string, limit = 10) => {\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase\r\n        .from('session_history')\r\n        .select(`companions:companion_id (*)`)\r\n        .eq('user_id', userId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit)\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data.map(({ companions }) => companions);\r\n}\r\n\r\nexport const getUserCompanions = async (userId: string) => {\r\n    const supabase = createSupabaseClient();\r\n    const { data, error } = await supabase\r\n        .from('companions')\r\n        .select()\r\n        .eq('author', userId)\r\n\r\n    if(error) throw new Error(error.message);\r\n\r\n    return data;\r\n}\r\n\r\n// export const newCompanionPermissions = async () => {\r\n//     const { userId, has } = await auth();\r\n//     const supabase = createSupabaseClient();\r\n\r\n//     let limit = 0;\r\n\r\n//     if(has({ plan: 'pro' })) {\r\n//         return true;\r\n//     } else if(has({ feature: \"3_companion_limit\" })) {\r\n//         limit = 3;\r\n//     } else if(has({ feature: \"10_companion_limit\" })) {\r\n//         limit = 10;\r\n//     }\r\n\r\n//     const { data, error } = await supabase\r\n//         .from('companions')\r\n//         .select('id', { count: 'exact' })\r\n//         .eq('author', userId)\r\n\r\n//     if(error) throw new Error(error.message);\r\n\r\n//     const companionCount = data?.length;\r\n\r\n//     if(companionCount >= limit) {\r\n//         return false\r\n//     } else {\r\n//         return true;\r\n//     }\r\n// }\r\n\r\n// Bookmarks\r\nexport const addBookmark = async (companionId: string, path: string) => {\r\n  const { userId } = await auth();\r\n  if (!userId) return;\r\n  const supabase = createSupabaseClient();\r\n  const { data, error } = await supabase.from(\"bookmarks\").insert({\r\n    companion_id: companionId,\r\n    user_id: userId,\r\n  });\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n  // Revalidate the path to force a re-render of the page\r\n\r\n  revalidatePath(path);\r\n  return data;\r\n};\r\n\r\nexport const removeBookmark = async (companionId: string, path: string) => {\r\n  const { userId } = await auth();\r\n  if (!userId) return;\r\n  const supabase = createSupabaseClient();\r\n  const { data, error } = await supabase\r\n    .from(\"bookmarks\")\r\n    .delete()\r\n    .eq(\"companion_id\", companionId)\r\n    .eq(\"user_id\", userId);\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n  revalidatePath(path);\r\n  return data;\r\n};\r\n\r\n// It's almost the same as getUserCompanions, but it's for the bookmarked companions\r\nexport const getBookmarkedCompanions = async (userId: string) => {\r\n  const supabase = createSupabaseClient();\r\n  const { data, error } = await supabase\r\n    .from(\"bookmarks\")\r\n    .select(`companions:companion_id (*)`) // Notice the (*) to get all the companion data\r\n    .eq(\"user_id\", userId);\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n  // We don't need the bookmarks data, so we return only the companions\r\n  return data.map(({ companions }) => companions);\r\n};"],"names":[],"mappings":";;;;;;IA4Ia,cAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chauh/OneDrive/Desktop/Coding/saas/components/CompanionCard.tsx"],"sourcesContent":["\"use client\";\r\nimport { removeBookmark } from \"@/lib/actions/companion.actions\";\r\nimport { addBookmark } from \"@/lib/actions/companion.actions\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport { usePathname } from \"next/navigation\";\r\n\r\ninterface CompanionCardProps {\r\n  id: string;\r\n  name: string;\r\n  topic: string;\r\n  subject: string;\r\n  duration: number;\r\n  color: string;\r\n  bookmarked: boolean;\r\n}\r\n\r\nconst CompanionCard = ({\r\n  id,\r\n  name,\r\n  topic,\r\n  subject,\r\n  duration,\r\n  color,\r\n  bookmarked,\r\n}: CompanionCardProps) => {\r\n  const pathname = usePathname();\r\n  const handleBookmark = async () => {\r\n    if (bookmarked) {\r\n      await removeBookmark(id, pathname);\r\n    } else {\r\n      await addBookmark(id, pathname);\r\n    }\r\n  };\r\n  return (\r\n    <article className=\"companion-card\" style={{ backgroundColor: color }}>\r\n      <div className=\"flex justify-between items-center\">\r\n        <div className=\"subject-badge\">{subject}</div>\r\n        <button className=\"companion-bookmark\" onClick={handleBookmark}>\r\n          <Image\r\n            src={\r\n              bookmarked ? \"/icons/bookmark-filled.svg\" : \"/icons/bookmark.svg\"\r\n            }\r\n            alt=\"bookmark\"\r\n            width={12.5}\r\n            height={15}\r\n          />\r\n        </button>\r\n      </div>\r\n\r\n      <h2 className=\"text-2xl font-bold\">{name}</h2>\r\n      <p className=\"text-sm\">{topic}</p>\r\n      <div className=\"flex items-center gap-2\">\r\n        <Image\r\n          src=\"/icons/clock.svg\"\r\n          alt=\"duration\"\r\n          width={13.5}\r\n          height={13.5}\r\n        />\r\n        <p className=\"text-sm\">{duration} minutes</p>\r\n      </div>\r\n\r\n      <Link href={`/companions/${id}`} className=\"w-full\">\r\n        <button className=\"btn-primary w-full justify-center\">\r\n          Launch Lesson\r\n        </button>\r\n      </Link>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default CompanionCard;"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;AAiBA,MAAM,gBAAgB,CAAC,EACrB,EAAE,EACF,IAAI,EACJ,KAAK,EACL,OAAO,EACP,QAAQ,EACR,KAAK,EACL,UAAU,EACS;IACnB,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,iBAAiB;QACrB,IAAI,YAAY;YACd,MAAM,CAAA,GAAA,sJAAA,CAAA,iBAAc,AAAD,EAAE,IAAI;QAC3B,OAAO;YACL,MAAM,CAAA,GAAA,sJAAA,CAAA,cAAW,AAAD,EAAE,IAAI;QACxB;IACF;IACA,qBACE,8OAAC;QAAQ,WAAU;QAAiB,OAAO;YAAE,iBAAiB;QAAM;;0BAClE,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;kCAAiB;;;;;;kCAChC,8OAAC;wBAAO,WAAU;wBAAqB,SAAS;kCAC9C,cAAA,8OAAC,6HAAA,CAAA,UAAK;4BACJ,KACE,aAAa,+BAA+B;4BAE9C,KAAI;4BACJ,OAAO;4BACP,QAAQ;;;;;;;;;;;;;;;;;0BAKd,8OAAC;gBAAG,WAAU;0BAAsB;;;;;;0BACpC,8OAAC;gBAAE,WAAU;0BAAW;;;;;;0BACxB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,6HAAA,CAAA,UAAK;wBACJ,KAAI;wBACJ,KAAI;wBACJ,OAAO;wBACP,QAAQ;;;;;;kCAEV,8OAAC;wBAAE,WAAU;;4BAAW;4BAAS;;;;;;;;;;;;;0BAGnC,8OAAC,4JAAA,CAAA,UAAI;gBAAC,MAAM,CAAC,YAAY,EAAE,IAAI;gBAAE,WAAU;0BACzC,cAAA,8OAAC;oBAAO,WAAU;8BAAoC;;;;;;;;;;;;;;;;;AAM9D;uCAEe","debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chauh/OneDrive/Desktop/Coding/saas/components/ui/table.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAIA;AAJA;;;AAMA,SAAS,MAAM,EAAE,SAAS,EAAE,GAAG,OAAsC;IACnE,qBACE,8OAAC;QACC,aAAU;QACV,WAAU;kBAEV,cAAA,8OAAC;YACC,aAAU;YACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIjB;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAsC;IACzE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAChC,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAsC;IACvE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAsC;IACzE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,SAAS,EAAE,SAAS,EAAE,GAAG,OAAmC;IACnE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAmC;IACpE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,sJACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAmC;IACpE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,0GACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,aAAa,EACpB,SAAS,EACT,GAAG,OAC6B;IAChC,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chauh/OneDrive/Desktop/Coding/saas/node_modules/next/src/shared/lib/image-external.tsx"],"sourcesContent":["import type { ImageConfigComplete, ImageLoaderProps } from './image-config'\nimport type { ImageProps, ImageLoader, StaticImageData } from './get-img-props'\n\nimport { getImgProps } from './get-img-props'\nimport { Image } from '../../client/image-component'\n\n// @ts-ignore - This is replaced by webpack alias\nimport defaultLoader from 'next/dist/shared/lib/image-loader'\n\n/**\n * For more advanced use cases, you can call `getImageProps()`\n * to get the props that would be passed to the underlying `<img>` element,\n * and instead pass to them to another component, style, canvas, etc.\n *\n * Read more: [Next.js docs: `getImageProps`](https://nextjs.org/docs/app/api-reference/components/image#getimageprops)\n */\nexport function getImageProps(imgProps: ImageProps) {\n  const { props } = getImgProps(imgProps, {\n    defaultLoader,\n    // This is replaced by webpack define plugin\n    imgConf: process.env.__NEXT_IMAGE_OPTS as any as ImageConfigComplete,\n  })\n  // Normally we don't care about undefined props because we pass to JSX,\n  // but this exported function could be used by the end user for anything\n  // so we delete undefined props to clean it up a little.\n  for (const [key, value] of Object.entries(props)) {\n    if (value === undefined) {\n      delete props[key as keyof typeof props]\n    }\n  }\n  return { props }\n}\n\nexport default Image\n\nexport type { ImageProps, ImageLoaderProps, ImageLoader, StaticImageData }\n"],"names":["getImageProps","imgProps","props","getImgProps","defaultLoader","imgConf","process","env","__NEXT_IMAGE_OPTS","key","value","Object","entries","undefined","Image"],"mappings":";;;;;;;;;;;;;;;IAiCA,OAAoB,EAAA;eAApB;;IAjBgBA,aAAa,EAAA;eAAbA;;;;6BAbY;gCACN;sEAGI;AASnB,SAASA,cAAcC,QAAoB;IAChD,MAAM,EAAEC,KAAK,EAAE,GAAGC,CAAAA,GAAAA,aAAAA,WAAW,EAACF,UAAU;QACtCG,eAAAA,aAAAA,OAAa;QACb,4CAA4C;QAC5CC,OAAAA,EAASC,QAAQC,GAAG,CAACC,iBAAiB;IACxC;IACA,uEAAuE;IACvE,wEAAwE;IACxE,wDAAwD;IACxD,KAAK,MAAM,CAACC,KAAKC,MAAM,IAAIC,OAAOC,OAAO,CAACV,OAAQ;QAChD,IAAIQ,UAAUG,WAAW;YACvB,OAAOX,KAAK,CAACO,IAA0B;QACzC;IACF;IACA,OAAO;QAAEP;IAAM;AACjB;MAEA,WAAeY,gBAAAA,KAAK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 342, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chauh/OneDrive/Desktop/Coding/saas/node_modules/next/image.js"],"sourcesContent":["module.exports = require('./dist/shared/lib/image-external')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}